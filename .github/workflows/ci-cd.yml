name: SBXService CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      build_services:
        description: 'Build and deploy services'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: sbxservice

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      java_changes: ${{ steps.filter.outputs.services }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            services:
              - 'services/**'

  build-and-deploy-services:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.java_changes == 'true' || 
      github.event.inputs.build_services == 'true' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [sbxservice]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: |
        cd services/${{ matrix.service }}
        mvn clean package -DskipTests
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      run: |
        # Get the repository URL from Terraform output
        cd infrastructure/terraform
        REPO_URL=$(terraform output -raw ecr_repository_url)
        
        # Build the Docker image
        cd ../../
        docker build -t $REPO_URL:$IMAGE_TAG -t $REPO_URL:latest services/${{ matrix.service }}
        
        # Push the Docker image
        docker push $REPO_URL:$IMAGE_TAG
        docker push $REPO_URL:latest
        
        echo "::set-output name=image::$REPO_URL:$IMAGE_TAG"
    
    - name: Force new deployment of ECS service
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      run: |
        aws ecs update-service --cluster sbxservice-${ENVIRONMENT}-cluster \
                              --service sbxservice-${ENVIRONMENT}-service \
                              --force-new-deployment 
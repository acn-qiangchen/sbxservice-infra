name: Terraform Operations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      tag:
        description: 'Container image tag (default: latest)'
        required: false
        type: string
        default: 'latest'
      ecr_account_id:
        description: 'AWS account ID hosting the ECR repository'
        required: false
        type: string
        default: ''

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  ECR_REPO_NAME: sbxservice-hello-service
  SERVICE_NAME: hello-service

permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Needed to checkout the repository

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      working-directory: terraform
      run: terraform init
    
    - name: Terraform Format Check
      working-directory: terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate
    
    - name: Construct Container Image URL
      id: image-url
      run: |
        # If ECR account ID is not provided, try to use the AWS account ID from the role
        if [ -z "${{ github.event.inputs.ecr_account_id }}" ]; then
          ECR_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        else
          ECR_ACCOUNT_ID="${{ github.event.inputs.ecr_account_id }}"
        fi
        
        # Construct ECR URL using standard format
        IMAGE_URL="${ECR_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:${{ github.event.inputs.tag }}"
        
        echo "Container image URL: ${IMAGE_URL}"
        echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT
    
    - name: Create Terraform Variables
      working-directory: terraform
      run: |
        cat > terraform.tfvars <<EOF
        environment = "${{ github.event.inputs.environment }}"
        aws_profile = ""
        container_image_hello = "${{ steps.image-url.outputs.image_url }}"
        EOF
        
        cat terraform.tfvars
    
    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: terraform plan -var="aws_profile=" -out=tfplan
      
    - name: Terraform Plan Summary
      working-directory: terraform
      run: |
        echo "#### Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform show -no-color tfplan | grep -E '(^  \+|^  \-|^  \~)' >> $GITHUB_STEP_SUMMARY || echo "No changes detected" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Also show the container image being used
        echo "#### Container Image" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.image-url.outputs.image_url }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      working-directory: terraform
      run: |
        terraform apply -auto-approve tfplan
        
        # Record outputs
        echo "#### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY 
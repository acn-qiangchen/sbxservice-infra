name: Terraform Operations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      tag:
        description: 'Container image tag (default: latest)'
        required: false
        type: string
        default: 'latest'
      aws_account_id:
        description: 'AWS account ID for assuming the IAM role and ECR'
        required: true
        type: string
      import_certificate:
        description: 'Import SSL certificate from ssl-cert directory'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  # Ensure ECR repo name doesn't include any tags
  ECR_REPO_NAME: sbxservice-hello-service
  SERVICE_NAME: hello-service
  TF_STATE_BUCKET_PREFIX: "sbxservice-terraform-state"
  TF_LOCK_TABLE_PREFIX: "sbxservice-terraform-locks"

permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Needed to checkout the repository

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ github.event.inputs.aws_account_id }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
    
    - name: Import SSL Certificate to ACM
      id: import-cert
      if: ${{ github.event.inputs.import_certificate }}
      working-directory: ssl-cert
      run: |
        echo "Importing SSL certificate to ACM..."
        
        # Import certificate to ACM
        CERT_ARN=$(aws acm import-certificate \
          --certificate fileb://certificate.pem \
          --private-key fileb://privatekey.pem \
          --certificate-chain fileb://chain.pem \
          --output text)
        
        echo "Imported certificate ARN: $CERT_ARN"
        echo "certificate_arn=$CERT_ARN" >> $GITHUB_OUTPUT
        
        # List certificates to verify
        aws acm list-certificates
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Create S3 bucket for Terraform state
      id: create-s3-bucket
      run: |
        # Define bucket and table names
        TF_STATE_BUCKET="${{ env.TF_STATE_BUCKET_PREFIX }}-${{ github.event.inputs.aws_account_id }}"
        TF_LOCK_TABLE="${{ env.TF_LOCK_TABLE_PREFIX }}-${{ github.event.inputs.aws_account_id }}"
        
        echo "bucket_name=${TF_STATE_BUCKET}" >> $GITHUB_OUTPUT
        echo "lock_table=${TF_LOCK_TABLE}" >> $GITHUB_OUTPUT
        
        # Check if bucket exists
        if ! aws s3api head-bucket --bucket ${TF_STATE_BUCKET} 2>/dev/null; then
          echo "Creating S3 bucket for Terraform state: ${TF_STATE_BUCKET}"
          
          # For us-east-1, don't specify LocationConstraint
          if [ "${{ env.AWS_REGION }}" = "us-east-1" ]; then
            aws s3api create-bucket \
              --bucket ${TF_STATE_BUCKET} \
              --region ${{ env.AWS_REGION }}
          else
            # For other regions, include LocationConstraint
            aws s3api create-bucket \
              --bucket ${TF_STATE_BUCKET} \
              --region ${{ env.AWS_REGION }} \
              --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
          fi
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket ${TF_STATE_BUCKET} \
            --versioning-configuration Status=Enabled
          
          # Enable encryption
          aws s3api put-bucket-encryption \
            --bucket ${TF_STATE_BUCKET} \
            --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
        else
          echo "S3 bucket already exists: ${TF_STATE_BUCKET}"
        fi
        
        # Check if DynamoDB table exists
        if ! aws dynamodb describe-table --table-name ${TF_LOCK_TABLE} 2>/dev/null; then
          echo "Creating DynamoDB table for Terraform state locking: ${TF_LOCK_TABLE}"
          # Create the DynamoDB table for state locking
          aws dynamodb create-table \
            --table-name ${TF_LOCK_TABLE} \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        else
          echo "DynamoDB table already exists: ${TF_LOCK_TABLE}"
        fi
    
    - name: Terraform Init
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ steps.create-s3-bucket.outputs.bucket_name }}" \
          -backend-config="key=environments/${{ github.event.inputs.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ steps.create-s3-bucket.outputs.lock_table }}" \
          -reconfigure
    
    - name: Terraform Format Check
      working-directory: terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate
    
    - name: Construct Container Image URL
      id: image-url
      run: |
        # Debug info
        echo "AWS Account ID: ${{ github.event.inputs.aws_account_id }}"
        echo "ECR Repo Name: ${{ env.ECR_REPO_NAME }}"
        echo "Tag: ${{ github.event.inputs.tag }}"
        
        # Ensure the tag is properly set
        IMAGE_TAG="${{ github.event.inputs.tag }}"
        
        # Construct ECR URL using standard format with explicit tag
        IMAGE_URL="${{ github.event.inputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:${IMAGE_TAG}"
        
        echo "Container image URL: ${IMAGE_URL}"
        echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT
    
    - name: Create Terraform Variables
      working-directory: terraform
      run: |
        cat > terraform.tfvars <<EOF
        environment = "${{ github.event.inputs.environment }}"
        aws_profile = ""
        container_image_hello = "${{ steps.image-url.outputs.image_url }}"
        # Add certificate ARN if available
        ${{ github.event.inputs.import_certificate && format('acm_certificate_arn = "{0}"', steps.import-cert.outputs.certificate_arn) || '' }}
        EOF
        
        cat terraform.tfvars
    
    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: terraform plan -var="aws_profile=" -out=tfplan
      
    - name: Terraform Plan Summary
      working-directory: terraform
      run: |
        echo "#### Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform show -no-color tfplan | grep -E '(^  \+|^  \-|^  \~)' >> $GITHUB_STEP_SUMMARY || echo "No changes detected" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Also show the container image being used
        echo "#### Container Image" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.image-url.outputs.image_url }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Show certificate ARN if imported
        if [ "${{ github.event.inputs.import_certificate }}" = "true" ]; then
          echo "#### Certificate ARN" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.import-cert.outputs.certificate_arn }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Terraform Apply
      working-directory: terraform
      run: |
        terraform apply -auto-approve tfplan
        
        # Record outputs
        echo "#### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY 
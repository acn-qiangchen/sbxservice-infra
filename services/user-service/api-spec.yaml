openapi: 3.0.3
info:
  title: User Management Service API
  description: API for managing user profiles, accounts and preferences
  version: 1.0.0
  contact:
    name: SBXService Team
    email: support@example.com
servers:
  - url: https://api.sbxservice.com/v1
    description: Production server
  - url: https://api.sbxservice-dev.com/v1
    description: Development server
paths:
  /users:
    get:
      summary: List users
      description: Returns a paginated list of users with optional filtering
      operationId: listUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          description: Offset for pagination
          schema:
            type: integer
            default: 0
        - name: status
          in: query
          description: Filter users by status
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
          
    post:
      summary: Create a new user
      description: Creates a new user account
      operationId: createUser
      requestBody:
        description: User object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
        
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
          
    get:
      summary: Get user by ID
      description: Returns a single user by ID
      operationId: getUserById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
        
    put:
      summary: Update user
      description: Updates an existing user
      operationId: updateUser
      requestBody:
        description: User object with updated fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
        
    delete:
      summary: Delete user
      description: Deletes a user
      operationId: deleteUser
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
        
  /users/{userId}/preferences:
    parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
          
    get:
      summary: Get user preferences
      description: Returns preferences for a user
      operationId: getUserPreferences
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
        
    put:
      summary: Update user preferences
      description: Updates preferences for a user
      operationId: updateUserPreferences
      requestBody:
        description: User preferences to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferencesUpdate'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
        
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        status:
          type: string
          enum: [active, inactive, suspended]
          example: "active"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - email
        - status
        - createdAt
        - updatedAt
        
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        password:
          type: string
          format: password
          example: "Password123!"
      required:
        - email
        - password
        
    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        status:
          type: string
          enum: [active, inactive, suspended]
          example: "active"
          
    UserPreferences:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        preferences:
          type: object
          additionalProperties: true
          example:
            theme: "dark"
            notifications: true
            language: "en-US"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - userId
        - preferences
        - updatedAt
        
    UserPreferencesUpdate:
      type: object
      properties:
        preferences:
          type: object
          additionalProperties: true
          example:
            theme: "dark"
            notifications: true
            language: "en-US"
      required:
        - preferences
        
    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 100
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
      required:
        - total
        - limit
        - offset
        
    Error:
      type: object
      properties:
        code:
          type: string
          example: "USER_EXISTS"
        message:
          type: string
          example: "A user with this email already exists"
        details:
          type: object
          additionalProperties: true
      required:
        - code
        - message
        
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 